#include "shell.h"

/**
 * _puts - prints a string without a \n
 * @str: string to print
 * Return: void
 */
void _puts(char *str)
{
	unsigned int length;

	length = _strlen(str);

	write(STDOUT_FILENO, str, length);
}

/**
 * execute_command - Executes user input
 * @command: user input to execute
 *
 * Return: None
 */
void execute_command(char *args[], char *env[])
{
	pid_t pid;
	int status;

	pid = fork();
	if (pid == -1)
	{
		perror("fork");
		return;
	}
	if (pid == 0)
	{
		/* Child process */
		if (execve(args[0], args, env) == -1)
		{
			perror("./shell");
			exit(EXIT_FAILURE);
		}
	}
	else
	{
		/* Parent process */
		if (waitpid(pid, &status, 0) == -1)
		{
			perror("waitpid");
			exit(EXIT_FAILURE);
		}
	}
}

/**
 * handle_signal - Handles the SIGINT signal
 * @signal: The signal number
 *
 * Return: None
 */
void handle_signal(int signal)
{
	(void) signal; /* Suppress unused parameter warning */

	_puts("\n");
	if (isatty(STDIN_FILENO))
		_puts(PROMPT);
}

/**
 * main - Core starting point for our Simple Shell program
 *
 * Return: Always 0
 */
int main(void)
{
	size_t buffer_size = BUFFER_SIZE;
	ssize_t read_input;
	char *command = NULL;
	char *args[] = {NULL, NULL};
	char *env[] = {NULL};

	signal(SIGINT, handle_signal);

	while (REPEAT)
	{
		_puts(PROMPT);
		read_input = getline(&command, &buffer_size, stdin);

		if (read_input == -1)
		{
			if (isatty(STDIN_FILENO))
				_puts("\n");
			break;
		}

		if (read_input > 1 && command[read_input - 2] == '\n')
			command[read_input - 2] = '\0';
		else
			continue;

		execute_command(args[0], env);
		free(command);
		command = NULL;
	}
	free(command);
	return (0);
}
